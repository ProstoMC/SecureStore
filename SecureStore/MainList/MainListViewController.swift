//
//  MainListViewController.swift
//  SecureStore
//
//  Created by macSlm on 03.03.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainListDisplayLogic: class {
    func displayBoards(viewModel: MainList.ShowBoards.ViewModel)
}

class MainListViewController: UITableViewController, MainListDisplayLogic {

    
    var interactor: MainListBusinessLogic?
    var router: (NSObjectProtocol & MainListRoutingLogic & MainListDataPassing)?

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

  
  // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = MainListInteractor()
        let presenter = MainListPresenter()
        let router = MainListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
  // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
  // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        let request = MainList.ShowBoards.Request()
        interactor?.showBoards(request: request)
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
    func displayBoards(viewModel: MainList.ShowBoards.ViewModel) {
        title = viewModel.username
    }
  

}

// MARK:  ACTIONS

extension MainListViewController {
    @objc private func addNewTask(){
        //showAlert(title: "New task", message: "Enter new task", indexPath: nil)
    }
}

// MARK:  SETUP UI

extension MainListViewController {
    private func setupUI() {
        view.backgroundColor = .gray
        setupNavigationBar()
    }
    
    private func setupNavigationBar() {
        title = "Tasks list"
        
        navigationController?.navigationBar.prefersLargeTitles = true

        let appearance = UINavigationBarAppearance()
        appearance.backgroundColor = ColorsList.darkBlueColor
        
        UINavigationBar.appearance().compactAppearance = appearance
        UINavigationBar.appearance().scrollEdgeAppearance = appearance
        UINavigationBar.appearance().standardAppearance = appearance
        appearance.largeTitleTextAttributes = [.foregroundColor: ColorsList.purpleColor]
        appearance.titleTextAttributes = [.foregroundColor: ColorsList.purpleColor]
        UINavigationBar.appearance().backgroundColor = ColorsList.darkBlueColor
                
        // Add button +
        navigationItem.rightBarButtonItem = UIBarButtonItem(
            title: "Add", style: .plain, target: self, action: #selector(addNewTask))
        navigationItem.rightBarButtonItem?.tintColor = ColorsList.purpleColor
        
    }
    
}

