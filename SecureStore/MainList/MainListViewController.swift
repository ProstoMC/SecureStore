//
//  MainListViewController.swift
//  SecureStore
//
//  Created by macSlm on 03.03.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainListDisplayLogic: AnyObject {
    func displayUser(viewModel: MainList.ShowUser.ViewModel)
    func displayBoards(viewModel: MainList.ShowBoards.ViewModel)
    func displayNewBoard(viewModel: MainList.CreateNewBoard.ViewModel)
    func displayEditedBoard(viewModel: MainList.EditBoardName.ViewModel)
    func deleteBoard(viewModel: MainList.DeleteBoard.ViewModel)
    
    
    func displayMessage(viewModel: MainList.DisplayMessage.ViewModel)
}


class MainListViewController: UITableViewController, MainListDisplayLogic {
    
    var interactor: MainListBusinessLogic?
    var router: (NSObjectProtocol & MainListRoutingLogic & MainListDataPassing)?
    
    var menuMode = false

    var menuPanel = UIView()
    var closeTapArea = UIView() // Hide menuPanel when u tap here
    let horizontalLine = UIView()
    let userImageView = UIImageView()
    let userNameLabel = UILabel()
    //Changing language don't used
    let languageButton: UIButton = {
        let button = UIButton()
        button.isHidden = true
        return button
    }()
       
    //private var boardsList: [String] = []
    private var userImageData: Data?
    
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    

    // MARK: - Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

  
  // MARK: - Setup
  
    private func setup() {
        let viewController = self
        let interactor = MainListInteractor()
        let presenter = MainListPresenter()
        let router = MainListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
  // MARK: - View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        let requestUN = MainList.ShowUser.Request()
        interactor?.showUser(request: requestUN)
        let requestSB = MainList.ShowBoards.Request()
        interactor?.showBoards(request: requestSB)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        tableView.reloadData()
    }
  
  // MARK: - DISPLAY LOGIC

    func displayUser(viewModel: MainList.ShowUser.ViewModel) {
        title = viewModel.username
        userNameLabel.text = viewModel.username
        guard let imageData = viewModel.imageData else { return }
        userImageData = imageData   //Behavior during making Menu panel
        userImageView.image = UIImage(data: imageData)
    }
    
    func displayBoards(viewModel: MainList.ShowBoards.ViewModel) {
        //boardsList = viewModel.boardsNames
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    
    func displayNewBoard(viewModel: MainList.CreateNewBoard.ViewModel) {
        var row = 0
        var section = 0
        
        if viewModel.type == BoardType.todo {
            section = 0
            row = interactor!.getCountOfToDoBoards() - 1
        }
        if viewModel.type == BoardType.data {
            section = 1
            row = interactor!.getCountOfDataBoards() - 1
        }
        self.tableView.insertRows(at: [IndexPath(row: row, section: section)], with: .automatic)
    }
    

    
    func displayEditedBoard(viewModel: MainList.EditBoardName.ViewModel) {
        
        tableView.reloadRows(at: [viewModel.indexPath], with: .automatic)
    }
    
    func deleteBoard(viewModel: MainList.DeleteBoard.ViewModel) {
        
        tableView.deleteRows(at: [viewModel.indexPath], with: .automatic)
    }
    
    func displayMessage(viewModel: MainList.DisplayMessage.ViewModel) {

        let alert = UIAlertController(
            title: viewModel.title,
            message: viewModel.message,
            preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: viewModel.buttonTitle, style: .default, handler: nil))
        self.present(alert, animated: true, completion: nil)
        
    }
}

// MARK: -  ACTIONS
extension MainListViewController {
    @objc private func addNewTask() {
        
        chooseTypeAlert()
        //showAlert(title: "New board".localized(), message: "Enter new board".localized(), indexPath: nil)
    }
    
    @objc private func menuPanelToggle() {
        
        if !menuMode {  //Making Panel during first tuch
            setupMenuPanel()
            self.view.addSubview(menuPanel)
            self.view.addSubview(closeTapArea)
            menuMode = true
        } else {
            menuPanel.isHidden.toggle()
            closeTapArea.isHidden.toggle()
        }
        
    }
    
    @objc private func logout() {
        self.dismiss(animated: true, completion: nil)
    }
    
    @objc private func userNameLapelTapped(){
        editUserNameAlert()
    }
    
    @objc private func editButtonTapped(){
        editUserPasswordAlert()
    }
    @objc private func userImageTapped(){
        choosingImageSourceAlert()
    }
    
}

// MARK:  - Image picker

extension MainListViewController: UIImagePickerControllerDelegate & UINavigationControllerDelegate {
    func fetchImageFromPicker(source: UIImagePickerController.SourceType){
        let imagePicker = UIImagePickerController()
        imagePicker.delegate = self
        imagePicker.allowsEditing = true
        imagePicker.sourceType = source
        if source == .camera {
            if UIImagePickerController.isSourceTypeAvailable(.camera) {
                print("=====CAMERA=====")
                present(imagePicker, animated: true, completion: nil)
            } else {
                let viewModel = MainList.DisplayMessage.ViewModel(title: "Error".localized(), message: "Camera is not available.".localized(), buttonTitle: "Ok")
                displayMessage(viewModel: viewModel)
                return
            }
        }
        if source == .photoLibrary {
            present(imagePicker, animated: true, completion: nil)
        }
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        if let editedImage = info[UIImagePickerController.InfoKey.editedImage] as? UIImage {
            let request = MainList.ChangeUserImage.Request(imageData:editedImage.pngData()!)
            interactor?.changeUserImage(request: request)
        } else if let originalImage = info[UIImagePickerController.InfoKey.originalImage] as? UIImage {
            let request = MainList.ChangeUserImage.Request(imageData:originalImage.pngData()!)
            interactor?.changeUserImage(request: request)
        }
        dismiss(animated: true, completion: nil)
    }
}



// MARK: - Alerts

extension MainListViewController: UITextFieldDelegate {
    
    // Lines edditing Alert
    private func chooseTypeAlert() {
        
        let alert = UIAlertController(title: "Choose type".localized(), message: nil, preferredStyle: .actionSheet)
        
        let toDoAction = UIAlertAction(title: "Todo".localized(), style: .default) { _ in
            self.boardNameAlert(
                title: "New board".localized(),
                message: "Enter new board".localized(),
                indexPath: nil,
                type: BoardType.todo)
            return
        }
        
        let dataAction = UIAlertAction(title: "Data type".localized(), style: .default) { _ in
            self.boardNameAlert(
                title: "New board",
                message: "Enter new board",
                indexPath: nil,
                type: BoardType.data)
            return
        }
                
        let cancelAction = UIAlertAction(title: "Cancel".localized(), style: .destructive)
        alert.addAction(toDoAction)
        alert.addAction(dataAction)
        alert.addAction(cancelAction)
        
        present(alert, animated: true)
    }
    
    private func boardNameAlert(title: String, message: String, indexPath: IndexPath?, type: String?) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        
        let saveAction = UIAlertAction(title: "Save".localized(), style: .default) { _ in
            guard let boardName = alert.textFields?.first?.text, !boardName.isEmpty else {
                print("Epmty field".localized())
                return
            }
                
            //Save or edit with CoreData
            if indexPath == nil {
                let request = MainList.CreateNewBoard.Request(name: boardName, type: type!)
                self.interactor?.createNewBoard(request: request)
            } else {
                print("Edditing ".localized(), boardName)
                let request = MainList.EditBoardName.Request(name: boardName, indexPath: indexPath!)
                self.interactor?.editBoardName(request: request)
            }
                
        }
            
        
        let canselAction = UIAlertAction(title: "Cancel".localized(), style: .destructive)
        
        alert.addTextField()
        if indexPath != nil { alert.textFields?.first?.text = message }
        alert.addAction(saveAction)
        alert.addAction(canselAction)
        
        present(alert, animated: true)
    }
    
    // Users fields edditing Alerts
    
    func editUserNameAlert() {
        let alert = UIAlertController(title: "Change username".localized(), message: nil, preferredStyle: .alert)

        let saveAction = UIAlertAction(title: "Save".localized(), style: .default) { _ in
            guard let text = alert.textFields?.first?.text, !text.isEmpty else {
                print("Epmty field".localized())
                return
            }
            let request = MainList.ChangeUserName.Request(userName: text)
            self.interactor?.changeUserName(request: request)

        }

        let canselAction = UIAlertAction(title: "Cancel".localized(), style: .destructive)

        alert.addTextField() { textField in
            textField.text = self.title
            textField.returnKeyType = .done
            textField.delegate = self
        }
        
        alert.addAction(saveAction)
        alert.addAction(canselAction)

        present(alert, animated: true)
    }
    
    func editUserPasswordAlert() {
        let alert = UIAlertController(title: "Change password".localized(), message: nil, preferredStyle: .alert)

        let saveAction = UIAlertAction(title: "Save".localized(), style: .default) { _ in
            guard let oldPassword = alert.textFields?.first?.text, !oldPassword.isEmpty else {
                print("Epmty field".localized())
                return
            }
            guard let newPassword = alert.textFields?[1].text, !newPassword.isEmpty else {
                print("Epmty field".localized())
                return
            }
            guard let confirmPassword = alert.textFields?[2].text, !confirmPassword.isEmpty else {
                print("Epmty field".localized())
                return
            }
            
            let request = MainList.ChangePassword.Request(
                oldPassword: oldPassword,
                newPassword: newPassword,
                confirmPassword: confirmPassword)
            self.interactor?.changePassword(request: request)
        }

        let canselAction = UIAlertAction(title: "Cancel".localized(), style: .destructive)
        
        alert.addTextField() { textField in
            textField.placeholder = "Enter current password".localized()
        }
        alert.addTextField() { textField in
            textField.placeholder = "Enter new password".localized()
        }
        alert.addTextField() { [weak self] textField in
            textField.placeholder = "Confirm new password".localized()
            textField.returnKeyType = .done
            textField.delegate = self
        }
        
        alert.addAction(saveAction)
        alert.addAction(canselAction)

        present(alert, animated: true)
    }
    
    private func choosingImageSourceAlert() {
        let alert = UIAlertController(title: "Choose source".localized(), message: nil, preferredStyle: .actionSheet)
        
        let cameraAction = UIAlertAction(title: "Camera".localized(), style: .default) { _ in
            self.fetchImageFromPicker(source: .camera)
            return
        }
        let libraryAction = UIAlertAction(title: "Photo gallery".localized(), style: .default) { _ in
            self.fetchImageFromPicker(source: .photoLibrary)
            return
        }
        let cancelAction = UIAlertAction(title: "Cancel".localized(), style: .destructive)
        
        alert.addAction(cameraAction)
        alert.addAction(libraryAction)
        alert.addAction(cancelAction)
        present(alert, animated: true)
        
    }
    
//    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
//
//    }
}



// MARK: - TableView Section Configuration
extension MainListViewController {
    
    
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        // 2 sections: To Do and Data
        return 2
    }
    
    override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        var title = "Error"
        if section == 0 { // For To Do
            title = "Tasks".localized()
        }
        if section == 1 { // For Data
            title = "Storages".localized()
        }
        return title
    }
    
    override func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) {
        if let headerView = view as? UITableViewHeaderFooterView {
            
            headerView.contentView.backgroundColor = ColorList.mainBlue
            headerView.backgroundView?.backgroundColor = ColorList.mainBlue
            headerView.textLabel?.textColor = ColorList.textColor
            headerView.textLabel?.font = UIFont.systemFont(ofSize: 19)
            //headerView.textLabel?.textAlignment = .center
            
            let lineView = UIView()
            lineView.backgroundColor = ColorList.textColor
            lineView.frame = CGRect(
                x: headerView.contentView.bounds.minX,
                y: headerView.contentView.bounds.maxY - headerView.contentView.bounds.width*0.001,
                width: headerView.contentView.bounds.width,
                height: 0.5
            )
            headerView.addSubview(lineView)
        }

    }
    
    // MARK: - TableView Rows Configuration
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        var count = 0
        if section == 0 { // For To Do
            count = interactor!.getCountOfToDoBoards() + 1 //For cell with plus
        }
        if section == 1 {
            count = interactor!.getCountOfDataBoards() + 1  //For cell with plus
        }
        return count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! BoardTableViewCell
        
        // Catching last row for making plus cell
        if indexPath.row + 1 == tableView.numberOfRows(inSection: indexPath.section) {
            cell.configureEmptyCell()
        } else {
            let request = MainList.GetBoard.Request(indexPath: indexPath)
            let getBoardResponse = interactor!.getBoard(request: request)
            cell.configure(board: getBoardResponse)
        }
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        //do nt process last row "plus cell"
        if indexPath.row + 1 < tableView.numberOfRows(inSection: indexPath.section) {
            router?.navigateByIndexPath(indexPath: indexPath)
        } else {
            if indexPath.section == 0 { // For TO DO
                boardNameAlert(
                    title: "New task list".localized(),
                    message: "Enter name".localized(),
                    indexPath: nil,
                    type: BoardType.todo)
            }
            if indexPath.section == 1 { // For Data
                boardNameAlert(
                    title: "New storage".localized(),
                    message: "Enter name".localized(),
                    indexPath: nil,
                    type: BoardType.data)
            }
        }
    }
    
    // MARK:  - Add buttons

    override func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        var actions: [UIContextualAction] = []
        // We haven't add buttons to last "plus" cell
        if indexPath.row + 1 < tableView.numberOfRows(inSection: indexPath.section) {
            
            let deleteButton = UIContextualAction(style: .normal, title:  "", handler: {
                [self] (ac:UIContextualAction, view:UIView, success:(Bool) -> Void)
               in
                let request = MainList.DeleteBoard.Request(indexPath: indexPath)
                self.interactor?.deleteBoard(request: request)

            })
            deleteButton.image = UIImage(systemName: "trash")
            

            let editButton = UIContextualAction(style: .normal, title: "", handler: {
                [self] (ac:UIContextualAction, view:UIView, success:(Bool) -> Void)
                in
                let request = MainList.GetBoard.Request(indexPath: indexPath)
                self.boardNameAlert(title: "Edit the board".localized(), message: interactor!.getBoard(request: request).name, indexPath: indexPath, type: nil)
            })
            editButton.image = UIImage(systemName: "square.and.pencil")

            editButton.backgroundColor = ColorList.additionalBlue
            deleteButton.backgroundColor = ColorList.textColor
            actions.append(deleteButton)
            actions.append(editButton)
            
            //return UISwipeActionsConfiguration(actions: [deleteButton, editButton])
        }
        return UISwipeActionsConfiguration(actions: actions)
    }
    
}


// MARK: -  SETUP UI
extension MainListViewController {
    
    
    private func setupUI() {
        tableView.register(BoardTableViewCell.self, forCellReuseIdentifier: "cell")
        tableView.tableFooterView = UIView()
        
        view.backgroundColor = ColorList.mainBlue
        setupNavigationBar()
        setupMenuPanel()
    }
    
    private func setupNavigationBar() {
        title = "Error"
        
        navigationController?.navigationBar.prefersLargeTitles = true

        let appearance = UINavigationBarAppearance()
        appearance.backgroundColor = ColorList.mainBlue
        
        UINavigationBar.appearance().compactAppearance = appearance
        UINavigationBar.appearance().scrollEdgeAppearance = appearance
        UINavigationBar.appearance().standardAppearance = appearance
        appearance.largeTitleTextAttributes = [.foregroundColor: ColorList.textColor]
        appearance.titleTextAttributes = [.foregroundColor: ColorList.textColor]
        UINavigationBar.appearance().backgroundColor = ColorList.mainBlue
        
        // Add bottom line
        
        let lineView = UIView()
        navigationController?.navigationBar.addSubview(lineView)
        lineView.translatesAutoresizingMaskIntoConstraints = false
        lineView.backgroundColor = ColorList.textColor
        var constraints: [NSLayoutConstraint] = []
        constraints.append(lineView.bottomAnchor.constraint(equalTo: navigationController!.navigationBar.bottomAnchor))
        constraints.append(lineView.leftAnchor.constraint(equalTo: navigationController!.navigationBar.leftAnchor))
        constraints.append(lineView.rightAnchor.constraint(equalTo: navigationController!.navigationBar.rightAnchor))
        constraints.append(lineView.heightAnchor.constraint(equalToConstant: 1))
        NSLayoutConstraint.activate(constraints)
                
        // Add button +
        navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addNewTask))
        navigationItem.rightBarButtonItem?.tintColor = ColorList.textColor
        
        
        // Add button Menu
        navigationItem.leftBarButtonItem = UIBarButtonItem(image: UIImage(systemName: "person.fill"), style: .plain, target: self, action: #selector(menuPanelToggle))
        navigationItem.leftBarButtonItem?.tintColor = ColorList.textColor
        
    }
    
    private func setupMenuPanel() {
               
        //Behavior for touch outside of menuPanel
        
        let tap = UITapGestureRecognizer(target: self, action: #selector(menuPanelToggle))
        closeTapArea.isUserInteractionEnabled = true
        closeTapArea.addGestureRecognizer(tap)
        
        //Frames
        menuPanel.frame = CGRect(x: 0, y: 0, width: tableView.frame.size.width/2, height: tableView.frame.size.height)
        closeTapArea.frame = CGRect(x: tableView.frame.midX, y: 0, width: tableView.frame.size.width/2, height: tableView.frame.size.height)
        
        //Appearance
        
        let gradientLayer = CAGradientLayer()
        gradientLayer.frame = menuPanel.bounds
        gradientLayer.colors = [ColorList.mainBlue.cgColor, ColorList.powder.cgColor]
        menuPanel.layer.insertSublayer(gradientLayer, at: 100)
        
        closeTapArea.backgroundColor = UIColor(white: 0.5, alpha: 0)
        
        //Add Elements
        setupLines()
        setupUserImage()
        setupUserNameLabel()
        setupButtons()
        setupLanguageButton()
        
    }
    
    private func setupLines() {
        let verticalLine = UIView()
        
        horizontalLine.backgroundColor = ColorList.textColor
        verticalLine.backgroundColor = ColorList.textColor
        
        horizontalLine.frame = CGRect(
            x: menuPanel.bounds.width*0.05,
            y: menuPanel.bounds.midY/2.4,
            width: menuPanel.bounds.width/1.1,
            height: view.bounds.width*0.003
        )
        verticalLine.frame = CGRect(
            x: menuPanel.bounds.maxX,
            y: menuPanel.bounds.maxY-menuPanel.bounds.height*0.35,
            width: view.bounds.width*0.003,
            height: menuPanel.bounds.height*0.7
        )
        
        menuPanel.addSubview(horizontalLine)
        //menuPanel.addSubview(verticalLine)
    }
    
    private func setupUserImage() {
        
        //userImageView.translatesAutoresizingMaskIntoConstraints = false
        
        // Appearance
       
        if userImageData != nil {
            userImageView.image = UIImage(data: userImageData!)
        } else {
            userImageView.image = UIImage(systemName: "person.circle.fill")
            userImageView.tintColor =  ColorList.textColor
            userImageView.backgroundColor = UIColor(displayP3Red: 0, green: 0, blue: 0, alpha: 0)
        }
        
        // Constraints
        
        userImageView.frame = CGRect(
            x: menuPanel.frame.width/2-menuPanel.frame.width/6,
            y: menuPanel.frame.width/6,
            width: menuPanel.frame.width/3,
            height: menuPanel.frame.width/3)
        userImageView.layer.cornerRadius = userImageView.frame.size.height/2
        userImageView.layer.masksToBounds = true
        userImageView.contentMode = .scaleToFill
        
        // Behavior
        let tap = UITapGestureRecognizer(target: self, action: #selector(userImageTapped))
        userImageView.isUserInteractionEnabled = true
        userImageView.addGestureRecognizer(tap)
        
        menuPanel.addSubview(userImageView)
    }
    
    
    
    private func setupUserNameLabel() {
        
       
        //Appearance
        
        //userNameLabel.translatesAutoresizingMaskIntoConstraints = false
        userNameLabel.text = title
        userNameLabel.textAlignment = .center
        userNameLabel.adjustsFontSizeToFitWidth = true
        
        userNameLabel.textColor = ColorList.textColor
        
        //Constraints
        
        userNameLabel.frame = CGRect(
            x: menuPanel.frame.width*0.05,
            y: menuPanel.frame.width/1.8,
            width: menuPanel.frame.width/1.1,
            height: menuPanel.frame.height/20
        )
        
        //Behavior
        
        let tap = UITapGestureRecognizer(target: self, action: #selector(userNameLapelTapped))
        userNameLabel.isUserInteractionEnabled = true
        userNameLabel.addGestureRecognizer(tap)
        menuPanel.addSubview(userNameLabel)
        
    }
    
    private func setupButtons() {
        
        let editButton = UIButton()
        let logoutButton = UIButton()
        
        //Appearance
        
        editButton.setTitleColor(ColorList.textColor, for: .normal)
        editButton.setTitle("Change password".localized(), for: .normal)
        
        logoutButton.setTitleColor(ColorList.textColor, for: .normal)
        logoutButton.setTitle("Log out".localized(), for: .normal)
        
        //Behavior
        
        logoutButton.addTarget(self, action: #selector(logout), for: .touchUpInside)
        editButton.addTarget(self, action: #selector(editButtonTapped), for: .touchUpInside)
        
        //Constraints
        
        editButton.frame = CGRect(
            x: menuPanel.frame.width*0.05,
            y: horizontalLine.frame.minY + menuPanel.frame.height/50,
            width: menuPanel.frame.width/1.1,
            height: menuPanel.frame.height/20
        )
        logoutButton.frame = CGRect(
            x: menuPanel.frame.width*0.05,
            y: editButton.frame.minY + menuPanel.frame.height/20,
            width: menuPanel.frame.width/1.1,
            height: menuPanel.frame.height/20
        )
        
        menuPanel.addSubview(editButton)
        menuPanel.addSubview(logoutButton)
    }
    
    private func setupLanguageButton() {
        
        //Appearance
        
        languageButton.setTitleColor(ColorList.mainBlue, for: .normal)
        languageButton.setTitle(GlobalSettings.shared.language, for: .normal)
        
        //Behavior
        
        //languageButton.addTarget(self, action: #selector(logout), for: .touchUpInside)
                
        //Constraints
        
        languageButton.frame = CGRect(
            x: menuPanel.frame.width*0.05,
            y: UIScreen.main.bounds.height/2 + UIScreen.main.bounds.height/5,
            width: menuPanel.frame.width/1.1,
            height: menuPanel.frame.height/20
        )
        menuPanel.addSubview(languageButton)
    }

}




