//
//  BoardDeskInteractor.swift
//  SecureStore
//
//  Created by macSlm on 24.04.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BoardDeskBusinessLogic {
    func showBoard(request: BoardDesk.ShowBoard.Request)
    func getCountOfUnits() -> Int
    func getUnit(indexPath: IndexPath) -> (type: String, data: Data)
    
    func saveImageAsUnit(request: BoardDesk.CreateUnit.Request)
    func saveTextFieldAsUnit(request: BoardDesk.CreateUnit.Request)
    func deleteUnit(request: BoardDesk.DeleteUnit.Request)
}

protocol BoardDeskDataStore {
    var board: Board! { get set }
    var units: [BoardUnit] { get }
}

class BoardDeskInteractor: BoardDeskBusinessLogic, BoardDeskDataStore {
    var presenter: BoardDeskPresentationLogic?
    var worker: BoardDeskWorker?
    
    var board: Board!
    var units: [BoardUnit] = []
    
    // MARK: Show the board
    
    func showBoard(request: BoardDesk.ShowBoard.Request) {
        units = CoreDataManager.shared.getUnits(board: board)
        
        let response = BoardDesk.ShowBoard.Response(board: board)
        presenter?.presentBoard(response: response)
    }
    
    func getCountOfUnits() -> Int {
 
        return units.count
    }
    
    // MARK:  - Saving Units
    func saveImageAsUnit(request: BoardDesk.CreateUnit.Request){
        guard let unit = CoreDataManager.shared.createUnit(board: board, unitType: "image", data: request.data) else {
            
            let response = BoardDesk.Message.Response(title: "Unit saving unsuccess", message: "Try again")
            presenter?.presentMessage(response: response)
            return
        }
        
        units.append(unit)
        presenter?.presentNewUnit()
        
    }
    
    func saveTextFieldAsUnit(request: BoardDesk.CreateUnit.Request) {
        guard let unit = CoreDataManager.shared.createUnit(board: board, unitType: "textfield", data: request.data) else {
            
            let response = BoardDesk.Message.Response(title: "Unit saving unsuccess", message: "Try again")
            presenter?.presentMessage(response: response)
            return
        }
        
        units.append(unit)
        presenter?.presentNewUnit()
    }
    
    // MARK:  - Edditing Units
    
    func getUnit(indexPath: IndexPath) -> (type: String, data: Data) {
        let unit = units[indexPath.row]
        print (unit.type!)
        return (unit.type!, unit.data!)
    }
    
    func deleteUnit(request: BoardDesk.DeleteUnit.Request) {
        print("Units count: \(units.count)")
        print("Index: \(request.indexPath.row)")
        
        if CoreDataManager.shared.deleteUnit(unit: units[request.indexPath.row]) {
            units.remove(at: request.indexPath.row)
            let response = BoardDesk.DeleteUnit.Response(indexPath: request.indexPath)
            presenter?.deleteUnit(response: response)
        }
        else {
            let response = BoardDesk.Message.Response(title: "Error", message: "Deleting Failed")
            presenter?.presentMessage(response: response)
        }
    }
    
}
