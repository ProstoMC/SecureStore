//
//  BoardDeskInteractor.swift
//  SecureStore
//
//  Created by macSlm on 24.04.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BoardDeskBusinessLogic {
    func showBoard(request: BoardDesk.ShowBoard.Request)
    func getCountOfUnits() -> Int
    func getUnit(index: Int) -> (type: String, data: Data)
    
    func saveImageAsUnit(request: BoardDesk.SaveImageAsUnit.Request)
    func deleteUnit(request: BoardDesk.DeleteUnit.Request)
}

protocol BoardDeskDataStore {
    var board: Board! { get set }
}

class BoardDeskInteractor: BoardDeskBusinessLogic, BoardDeskDataStore {
    var presenter: BoardDeskPresentationLogic?
    var worker: BoardDeskWorker?
    
    var board: Board!
    var units: [BoardUnit]!
    
    // MARK: Show the board
    
    func showBoard(request: BoardDesk.ShowBoard.Request) {
        
        let response = BoardDesk.ShowBoard.Response(board: board)
        presenter?.presentBoard(response: response)
    }
    
    func getCountOfUnits() -> Int {
        units = CoreDataManager.shared.getUnits(board: board)
        
        return units.count
    }
    
    
    func saveImageAsUnit(request: BoardDesk.SaveImageAsUnit.Request){
        guard let unit = CoreDataManager.shared.createUnit(board: board, unitType: "image", data: request.imageData) else {
            
            let response = BoardDesk.Message.Response(title: "Unit saving unsuccess", message: "Try again")
            presenter?.presentMessage(response: response)
            return
        }
        
        units.append(unit)
        
        let response = BoardDesk.SaveImageAsUnit.Response(unit: unit)
        presenter?.presentNewUnit(response: response)
        
    }
    
    func getUnit(index: Int) -> (type: String, data: Data) {
        let unit = units[index]
        return (unit.type!, unit.data!)
    }
    
    func deleteUnit(request: BoardDesk.DeleteUnit.Request) {
        print("Units count: \(units.count)")
        print("Index: \(request.indexPath.row)")
        
        if CoreDataManager.shared.deleteUnit(unit: units[request.indexPath.row]) {
            units.remove(at: request.indexPath.row)
            let response = BoardDesk.DeleteUnit.Response(indexPath: request.indexPath)
            presenter?.deleteUnit(response: response)
        }
        else {
            let response = BoardDesk.Message.Response(title: "Error", message: "Deleting Failed")
            presenter?.presentMessage(response: response)
        }
    }
    
}
