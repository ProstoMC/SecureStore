//
//  TaskListInteractor.swift
//  SecureStore
//
//  Created by macSlm on 03.06.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TaskListBusinessLogic {
    func showBoard(request: TaskList.ShowBoard.Request)
    
    func getCountOfTasks() -> Int
    func getTask(indexPath: IndexPath) -> (name: String, complited: Bool)
    
    func createNewTask(request: TaskList.CreateTask.Request)
    func editTaskName(request: TaskList.EditTaskName.Request)
    func deleteTask(request: TaskList.DeleteTask.Request)
}

protocol TaskListDataStore {
    var board: Board! { get set }
    var tasks: [Task] { get }
    
}

class TaskListInteractor: TaskListBusinessLogic, TaskListDataStore {
    var presenter: TaskListPresentationLogic?
    var worker: TaskListWorker?
    
    var board: Board!
    var tasks: [Task] = []
    
    // MARK: Do something
    
    func showBoard(request: TaskList.ShowBoard.Request) {
        tasks = CoreDataManager.shared.getTasks(board: board)
        tasks.sort { (unit1, unit2) -> Bool in
            unit1.id < unit2.id
        }
        
        let response = TaskList.ShowBoard.Response(board: board)
        presenter?.presentBoard(response: response)
    }
    
    // MARK:  - GETTING FROM DATASTORE
    
    func getCountOfTasks() -> Int {
        return tasks.count
    }
    
    func getTask(indexPath: IndexPath) -> (name: String, complited: Bool) {
        let task = tasks[indexPath.row]
        
        return (task.name ?? "Error", task.complited)
    }
    
    // MARK:  - TASKS
    
    func createNewTask(request: TaskList.CreateTask.Request){
        guard let task = CoreDataManager.shared.createTask(board: board, name: request.taskName, id: tasks.count) else {
            let response = TaskList.DisplayMessage.Response(title: "Creating Failed", message: "Try Again")
            presenter?.presentMessage(response: response)
            return
        }
        tasks.append(task)
        let response = TaskList.CreateTask.Response(task: task)
        presenter?.presentNewTask(response: response)
    }
    func editTaskName(request: TaskList.EditTaskName.Request){
        tasks[request.indexPath.row].name = request.name
        
        if CoreDataManager.shared.saveChanges() {
            let response = TaskList.EditTaskName.Response(task: tasks[request.indexPath.row], indexPath: request.indexPath)
            presenter?.presentChangedTask(response: response)
        }
        else {
            let response = TaskList.DisplayMessage.Response(title: "Changing Failed".localized(), message: "Try Again".localized())
            presenter?.presentMessage(response: response)
        }
    }
    
    func deleteTask(request: TaskList.DeleteTask.Request){
        
        if CoreDataManager.shared.deleteTask(task: tasks[request.indexPath.row]) {
            tasks.remove(at: request.indexPath.row)
            renumberTasks()
            let response = TaskList.DeleteTask.Response(indexPath: request.indexPath)
            presenter?.deleteTask(response: response)
        }
        else {
            let response = TaskList.DisplayMessage.Response(title: "Error".localized(), message: "Deleting Failed".localized())
            presenter?.presentMessage(response: response)
        }
    }
    //Used when delete board
    func renumberTasks() {
        for (index, task) in tasks.enumerated() {
            task.id = Int64(index)
        }

    }
    
}
