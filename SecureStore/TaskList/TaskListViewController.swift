//
//  TaskListViewController.swift
//  SecureStore
//
//  Created by macSlm on 03.06.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TaskListDisplayLogic: AnyObject {
    func displayBoard(viewModel: TaskList.ShowBoard.ViewModel)
    func displayMessage(viewModel: TaskList.DisplayMessage.ViewModel)
    
    func displayNewTask(viewModel: TaskList.CreateTask.ViewModel)
    func displayEditedTask(viewModel: TaskList.EditTaskName.ViewModel)
    func deleteTask(viewModel: TaskList.DeleteTask.ViewModel)
}

class TaskListViewController: UITableViewController {
    var interactor: TaskListBusinessLogic?
    var router: (NSObjectProtocol & TaskListRoutingLogic & TaskListDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = TaskListInteractor()
        let presenter = TaskListPresenter()
        let router = TaskListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        interactor?.showBoard(request: TaskList.ShowBoard.Request())
    }
    
}

// MARK:  - ACTIONS

extension TaskListViewController {
    @objc func backButtonTapped() {
        self.dismiss(animated: true, completion: nil)
  
    }
    @objc func addNewTask() {
        taskNameAlert(
            title: "New task".localized(),
            message: "Enter new task".localized(),
            indexPath: nil
        )
    }
}

// MARK:  - DISPLAY LOGIC

extension TaskListViewController: TaskListDisplayLogic {
    
    func displayBoard(viewModel: TaskList.ShowBoard.ViewModel) {
        title = viewModel.boardName
    }
    
    func displayMessage(viewModel: TaskList.DisplayMessage.ViewModel) {
        let alert = UIAlertController(
            title: viewModel.title,
            message: viewModel.message,
            preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: viewModel.buttonTitle, style: .default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    
    func displayNewTask(viewModel: TaskList.CreateTask.ViewModel) {
        tableView.insertRows(at: [IndexPath(row: interactor!.getCountOfTasks()-1, section: 0)], with: .automatic)
    }
    
    func displayEditedTask(viewModel: TaskList.EditTaskName.ViewModel) {
        tableView.reloadRows(at: [viewModel.indexPath], with: .automatic)
    }
    func deleteTask(viewModel: TaskList.DeleteTask.ViewModel) {
        tableView.deleteRows(at: [viewModel.indexPath], with: .automatic)
    }
    
}

// MARK:  - ALERTS
extension TaskListViewController {
    //Alert for changing name of tasl
    private func taskNameAlert(title: String, message: String, indexPath: IndexPath?) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        
        let saveAction = UIAlertAction(title: "Save".localized(), style: .default) { _ in
            guard let taskName = alert.textFields?.first?.text, !taskName.isEmpty else {
                self.displayMessage(viewModel: TaskList.DisplayMessage.ViewModel(
                    title: "Empty field".localized(),
                    message: "Try again".localized(),
                    buttonTitle: "Ok"))
                return
            }
                
            //Save or edit with CoreData
            if indexPath == nil {
                let request = TaskList.CreateTask.Request(taskName: taskName)
                self.interactor?.createNewTask(request: request)
            } else {
                let request = TaskList.EditTaskName.Request(name: taskName, indexPath: indexPath!)
                self.interactor?.editTaskName(request: request)
            }
                
        }
            
        
        let canselAction = UIAlertAction(title: "Cancel".localized(), style: .destructive)
        
        alert.addTextField()
        if indexPath != nil { alert.textFields?.first?.text = message }
        alert.addAction(saveAction)
        alert.addAction(canselAction)
        
        present(alert, animated: true)
    }
}

// MARK:  - TABLE VIEW SETUP
extension TaskListViewController {
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return interactor!.getCountOfTasks()
    }
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let task = interactor?.getTask(indexPath: indexPath)  // Here task is cortege
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! TaskTableViewCell
        cell.configure(taskName: task!.name, complitedStatus: task!.complited)
        
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
//        guard let unit = interactor?.getTask(indexPath: indexPath) else { return }
//        if unit.type == UnitType.image {
//            router?.navigateToFullScreenImage(indexPath: indexPath)
//        }
    }
    
    override func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {

        let deleteButton = UIContextualAction(style: .normal, title:  "", handler: {
            [self] (ac:UIContextualAction, view:UIView, success:(Bool) -> Void)
           in
            let request = TaskList.DeleteTask.Request(indexPath: indexPath)
            self.interactor?.deleteTask(request: request)

        })
        
        deleteButton.image = UIImage(systemName: "trash")
        deleteButton.backgroundColor = ColorList.mainBlue
        
        let editButton = UIContextualAction(style: .normal, title: "", handler: {
            [self] (ac:UIContextualAction, view:UIView, success:(Bool) -> Void)
            in
            self.taskNameAlert(title: "Edit the task".localized(), message: interactor!.getTask(indexPath: indexPath).name, indexPath: indexPath)
        })
        editButton.image = UIImage(systemName: "square.and.pencil")

        editButton.backgroundColor = ColorList.additionalBlue
        deleteButton.backgroundColor = ColorList.textColor


        return UISwipeActionsConfiguration(actions: [deleteButton, editButton])
    }
}

// MARK: -  SETUP UI
extension TaskListViewController {
    
    private func setupUI() {
        tableView.register(TaskTableViewCell.self, forCellReuseIdentifier: "cell")
        tableView.tableFooterView = UIView()
        
        view.backgroundColor = ColorList.mainBlue
        setupNavigationBar()
    }
    
    private func setupNavigationBar() {
        title = "Error"
        
        navigationController?.navigationBar.prefersLargeTitles = true

        let appearance = UINavigationBarAppearance()
        appearance.backgroundColor = ColorList.mainBlue
        
        UINavigationBar.appearance().compactAppearance = appearance
        UINavigationBar.appearance().scrollEdgeAppearance = appearance
        UINavigationBar.appearance().standardAppearance = appearance
        appearance.largeTitleTextAttributes = [.foregroundColor: ColorList.textColor]
        appearance.titleTextAttributes = [.foregroundColor: ColorList.textColor]
        UINavigationBar.appearance().backgroundColor = ColorList.mainBlue
        
        // Add bottom line
        
        let lineView = UIView()
        navigationController?.navigationBar.addSubview(lineView)
        lineView.translatesAutoresizingMaskIntoConstraints = false
        lineView.backgroundColor = ColorList.textColor
        var constraints: [NSLayoutConstraint] = []
        constraints.append(lineView.bottomAnchor.constraint(equalTo: navigationController!.navigationBar.bottomAnchor))
        constraints.append(lineView.leftAnchor.constraint(equalTo: navigationController!.navigationBar.leftAnchor))
        constraints.append(lineView.rightAnchor.constraint(equalTo: navigationController!.navigationBar.rightAnchor))
        constraints.append(lineView.heightAnchor.constraint(equalToConstant: navigationController!.navigationBar.bounds.width*0.002))
        NSLayoutConstraint.activate(constraints)
                
        // Add button +
        navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addNewTask))
        navigationItem.rightBarButtonItem?.tintColor = ColorList.textColor
        
        
        // Add button Menu
        navigationItem.leftBarButtonItem = UIBarButtonItem(image: UIImage(systemName: "chevron.backward"), style: .plain, target: self, action: #selector(backButtonTapped))
        navigationItem.leftBarButtonItem?.tintColor = ColorList.textColor
        
    }
}
