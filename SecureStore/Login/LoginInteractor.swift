//
//  LoginInteractor.swift
//  SecureStore
//
//  Created by macSlm on 16.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic {
    func login(request: Login.Login.Request)
    func signUp(request: Login.SignUp.Request)
    func toggleLanguage()
    func getLanguage()
}

protocol LoginDataStore {
    var name: String { get }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {
    

    var name: String = "Error"
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    var router: LoginRouter?
    
    
    
    // MARK: - LOGIN
    
    func login(request: Login.Login.Request) {
        let textList = TextList.shared.getloginUI()
        
        worker = LoginWorker()
        router = LoginRouter()
        
        let userName = request.userName
        let password = request.password
        let passwordHash = worker?.encryptString(string: password ?? "")
        
        let success = worker?.compareUsers(userName: userName ?? "", passwordHash: passwordHash ?? "")
        
        
        
        if success == true {
            name = userName ?? "Error Test"
            presenter?.moveToMainlist()
        }
        else {
            let errorMessage = textList.messageErrorLogin
            let alert = Login.ShowAlert.Response(title: "", errorMessage: errorMessage)
            presenter?.showAlert(response: alert)
        }
        

        

    }
    
    // MARK: - SIGN UP
    
    func signUp(request: Login.SignUp.Request) {
        let textList = TextList.shared.getloginUI()
        worker = LoginWorker()
        
        let userName = request.userName
        let password = request.password
        let confirmPassword = request.confirmPassword
        
        //Checking fields
        
        var errorMessage = worker?.check3Fields(userName: userName, password: password, confirmPassword: confirmPassword)
        
        if errorMessage != textList.messageSuccess {
            let alert = Login.ShowAlert.Response(title: "", errorMessage: errorMessage ?? "")
            presenter?.showAlert(response: alert)
            return
        }
        
        //Checking username in store
        
        guard worker?.checkUserInStore(userName: userName ?? "") == true else {
            errorMessage = textList.messageUserNameTaken
            let alert = Login.ShowAlert.Response(title: "", errorMessage: errorMessage ?? "")
            presenter?.showAlert(response: alert)
            return
        }
        
        //Encrypting Password
        
        guard let passwordHash = worker?.encryptString(string: password!) else {
            errorMessage = "Encrypt Error"
            let alert = Login.ShowAlert.Response(title: "", errorMessage: errorMessage ?? "")
            presenter?.showAlert(response: alert)
            return
        }
        
        //Making User

        guard worker?.makeNewUser(userName: userName!, passwordHash: passwordHash) == true else {
            errorMessage = "Making user error"
            let alert = Login.ShowAlert.Response(title: "", errorMessage: errorMessage ?? "")
            presenter?.showAlert(response: alert)
            return
        }
        
        //Login
        
        let request = Login.Login.Request(userName: userName, password: password)
        login(request: request)
        

    }
    
    // MARK: - TOGGLE LANGUAGE
    
    func toggleLanguage() {
        GlobalSettings.shared.toggleLanguage()
        presenter?.getLanguage()
    }
    func getLanguage() {
        presenter?.getLanguage()
    }

    
}
